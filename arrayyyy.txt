#include <iostream>
#include <time.h>
using namespace std;

class array
{
private:
    int *a, n;
public:
    array(int len)
    {
        this -> n = len;
        this-> a = new int [n];
    }
    array(int len, int t, int d = 10)
    {
        this->n = len;
        this->a = new int [n];
        if (t == 1)
        {
            for (int i = 0; i < n; i++)
                this->a[i] = rand() % d;
        }
        if (t == 2)
        {
            for(int i = 0; i < n; i++)
                this-> a[i] = i;
        }
        if (t == 3)
        {
            for(int i = 0; i < n; i++)
                this->a[i] = n - 1 - i;
        }
    }
    array(int *arr, int N)
    {
        a = new int [N];
        n = N;
        for(int i = 0; i < n; i++)
            a[i] = arr[i];
    }
    ~array()
    {
        delete[] a;
        a = NULL;
    }
    array(const array &x)
    {
        n = x.n;
        a = new int [n];
        for(int i = 0; i < n; i++)
            a[i] = x.a[i];
    }
public:
    friend ostream & operator << (ostream &out, array &x)
    {
        for(int i = 0; i < x.n; i++)
            cout << x[i] << " ";
        return out;
    }
    friend istream & operator >> (istream &in, array &x)
    {
        for(int i = 0; i < x.n; i++)
            in >> x.a[i];
        return in;
    }
    int &operator [] (int i)
    {
        return this-> a[i];
    }
    array &operator = (const array &x)
    {
        if (this == &x)
            return *this;
        delete[] a;
        n = x.n;
        a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = x.a[i];
        return *this;
    }
    bool Test()
    {
        for(int i = 0; i < n; i++)
        {
            if (a[i] > a[i+1])
                return false;
        }
        return true;
    }
    bool operator == (array x)
    {
        int count_1 = 0;
        int count_2 = 0;
        int len_1 = this-> n;
        int len_2 = x.n;
        if (len_1 != len_2)
            return false;
        for(int i = 0; i < len_1; i++)
        {
            for(int j = 0; j < len_2; j++)
            {
                if (a[i] != x.a[j])
                    count_1++;
                if (x.a[i] != a[j])
                    count_2++;
            }
            if (count_1 == len_2)
                return false;
            if (count_2 == len_2)
                return false;
            count_1 = 0;
            count_2 = 0;
        }
        return true;
    }

    //сортировки
    // Пирамидальная сортировка
    void tree(int n, int i)
    {
        int j = 2*i + 1;
        int x = a[i];
        bool f = true;
        while (j < n && f) {
            if (j + 1 < n && a[j + 1] > a[j])
                j++;
            if (a[j] > x)
            {
                a[i] = a[j];
                i = j;
                j = 2*i + 1;
            }
            else
                f = false;
        }
        a[i] = x;
    }
    void Heapsort()
    {
        for(int i = n /2 - 1; i>= 0; i--)
        {
            this->tree(n, i);
        }
        for(int i = n - 1; i > 0; i--)
        {
            int tmp = a[0];
            a[0] = a[i];
            a[i] = tmp;
            this->tree(i, 0);
        }
    }
    //Шелла
    void Shell_Sort()
    {
        int i, j;
        for(int s = n/2; s > 0; s = s / 2)
        {
            for(i = s; i < n; i++)
            {
                int tmp = a[i];
                for(j = i; j >= s; j = j - s)
                {
                    if (tmp < a[j - s])
                        a[j] = a[j - s];
                    else
                        break;
                }
                a[j] = tmp;
            }
        }
    }

    void Hoar_sort(int left, int right)
    {
        int op_el; // разрешающий элемент
        int l_hold = left; //левая граница
        int r_hold = right; // правая граница
        op_el = a[left];
        while (left < right) // пока границы не сомкнутся
        {
            while ((a[right] >= op_el) && (left < right))
                right--; // сдвигаем правую границу пока элемент [right] больше [pivot]
            if (left != right) // если границы не сомкнулись
            {
                a[left] = a[right]; // перемещаем элемент [right] на место разрешающего
                left++; // сдвигаем левую границу вправо
            }
            while ((a[left] <= op_el) && (left < right))
                left++; // сдвигаем левую границу пока элемент [left] меньше [pivot]
            if (left != right) // если границы не сомкнулись
            {
                a[right] = a[left]; // перемещаем элемент [left] на место [right]
                right--; // сдвигаем правую границу влево
            }
        }
        a[left] = op_el; // ставим разрешающий элемент на место
        op_el = left;
        left = l_hold;
        right = r_hold;
        if (left < op_el) // Рекурсивно вызываем сортировку для левой и правой части массива
            Hoar_sort(left, op_el - 1);
        if (right > op_el)
            Hoar_sort(op_el + 1, right);
    }
};

void InitArray(int *a, int n)
{
    for(int i = 0; i < n; i++)
        cin >> a[i];
}
void PrintArray(int *a, int n)
{
    for(int i = 0; i < n; i++)
        cout << a[i] << " ";
    cout << endl;
}

int main()
{
    srand(time(NULL));
    array a_1(10, 1, 20);
    cout << a_1 << endl;
    a_1.Shell_Sort();
    cout << a_1;
    return 0;
}
